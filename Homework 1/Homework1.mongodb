//Parth Patel
//UH ID# 1837355

//All following code are written and compiled in Mongoose Shell MongoDB 
//Connect to URL - mongodb://localhost:27017/

// Exercise Part A
1. use employees //The use command helps to make the 'employees' database.

2. show dbs //This command helps us to view all the databases in the connection.

//Exercise Part B
1. show dbs //This command helps us to view all the databases in the connection.
   use temporary //The use command helps to make the 'temporary' database.
   db.createCollection('test'); //This command helps to create collection named 'test'.
   show dbs //This command helps us to view the new added database'temporary' in the connection.
   show collections //This command helps us to view the new added collection 'test' in the connection.
   show dbs //This command helps us to view that we have all the databases before dropping the database 'temporary'.
   db.dropDatabase(); //This command helped me to drop the database 'temporary'.
   show dbs //This command helps us to view that we have droped the database 'temporary'.

2. use employees //The use command helps to switch to the 'employees' database.
   db.createCollection('Information Technology'); //This command helps to create collection named 'Information Technology'.
   db.createCollection('Accounting'); //This command helps to create collection named 'Accounting'.
   db.createCollection('Help Desk'); //This command helps to create collection named 'Help Desk'.

3. show collections //This commands shows all the collections in 'employees' database.

//Exerice Part C
1. //Accounting collection
   //Here we are inserting the first data set into Accounting collection using insert command
   db.techdep.insert(
   {
      employeeid: 01,
      name: "Peter Parker",
      salary: 70000
   })
   //Here we are inserting the second data set into Accounting collection using insert command
   db.techdep.insert(
   {
      employeeid: 02,
      name: "Clark Kent",
      salary: 80000
   })
   //Here we are inserting the third data set into Accounting collection using insert command
   db.techdep.insert(
   {
      employeeid: 03,
      name: "John Snow",
      salary: 85000
   })

   //IT collection 
   //Here we are inserting the first data set into IT collection using insert command
   db.techdep.insert(
   {
      employeeid: 01,
      name: "Tom Brady",
      salary: 90000 
   })
   //Here we are inserting the second data set into IT collection using insert command
   db.techdep.insert(
   {
      employeeid: 02,
      name: "Luke Skywalker",
      salary: 80000
   })
   //Here we are inserting the third data set into IT collection using insert command
   db.techdep.insert(
   {
      employeeid: 03,
      name: "Jonny Bravo",
      salary: 75000
   })

   //Marketing collection
   //Here we are inserting the first data set into Marketing collection using insert command
   db.techdep.insert(
   {
      employeeid: 01,
      name: "Mike Wazowski",
      salary: 75000  
   })
   //Here we are inserting the second data set into Marketing collection using insert command
   db.techdep.insert(
   {
      employeeid: 02,
      name: "Michael Jordan",
      salary: 95000
   })
   //Here we are inserting the third data set into Marketing collection using insert command
   db.techdep.insert(
   {
      employeeid: 03,
      name: "Michael Jackson",
      salary: 80000 
   })

2. db.Accounting.find() //This command displays all the data present in the Accounting collection
   db.IT.find() //This command displays all the data present in the IT collection
   db.Marketing.find() //This command displays all the data present in the Marketing collection

//Exercise Part D
1. //These insert commands will insert three new data sets to IT collection
   db.IT.insert({
    employeeid: 1187,
    name: "John Steight",
    salary: 75000
  })
  db.IT.insert({
    employeeid: 2455,
    name: "Syed",
    salary: 90000
  })
  db.IT.insert({
    employeeid: 24113,
    name: "Wright John",
    salary: 65000 
  })

2. db.IT.find({employeeid: 1}) //This command finds the data whose emplyeeid is 1 in IT collection 
   db.Marketing.find({employeeid: 3}) //This command finds the data whose emplyeeid is 3 in Marketing collection

3. db.Accounting.find({name: "Luke Skywalker"}) //This command finds the data whose name is Luke Skywalker in Accounting collection 
   db.Accounting.find({name: "Syed"}) //This command finds the data whose name is Syed in IT collection 

4. db.IT.find({name: /^John/}) //This command finds the data whose name starts with the word 'John' in IT collection

5. db.IT.find({"name": /John/}) //This command finds the data whose name contains the word 'John' in IT collection

//Exercise Part E
1. db.zips.find({pop: { $lt: 1500 }}) //This command finds data sets whoose population is less than 1500

2. db.zips.find({city: { $eq: "CHESTER" }}) //This command finds data sets whoose city name is 'CHESTER'

3.db.zips.find({ loc: { $in: [ -84.38570799999999, 45.015207 ]}}) //This command gets data set whoose loc array is '84.38570799999999', '46.015207'

4. db.zips.find({ $or: [ { city: 'WARREN' }, { loc: { $in: [ -80.76424299999999, 41.231819 ]}}]}) //This command gets data sets that match the city ''WARREN' or location '-80.76424299999999', '41.231819'

//Exercise Part F
1. db.employees.find({$where: function() { return (this.salary > 7500) }}) //This command gets data sets that has salary more than 7500

2. db.employees.find({$where: function() { return (this.name == "John") }}) //This command gets data sets that has 'John' in its name field

//Exercise Part G
1. db.IT.find({},{ name: true, salary: true }) //This command gives only name and salary fields from IT collection
